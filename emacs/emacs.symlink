;; Require Emacs' package functionality
(require 'package)

;; Add the Melpa repository to the list of package sources
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)

;; Initialise the package system.
(package-initialize)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(blink-cursor-mode nil)
 '(c-require-final-newline
   (quote
    ((c-mode . t)
     (c++-mode . t)
     (objc-mode . t)
     (java-mode . t))))
 '(column-number-mode t)
 '(cua-mode t nil (cua-base))
 '(delete-selection-mode t)
 '(fringe-mode (quote (nil . 0)) nil (fringe))
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(initial-major-mode (quote text-mode))
 '(mark-even-if-inactive t)
 '(nxml-child-indent 4)
 '(nxml-outline-child-indent 4)
 '(org-CUA-compatible nil)
 '(package-enable-at-startup nil)
 '(recentf-mode t)
 '(scroll-bar-mode (quote right))
 '(sgml-basic-offset 4)
 '(shift-select-mode t)
 '(show-paren-mode t)
 '(tool-bar-mode nil)
 '(vc-follow-symlinks t))

;; Key Bindings
(global-set-key "\C-s" 'save-buffer)
(global-set-key "\C-q" 'save-buffers-kill-terminal)
(global-set-key "\C-o" 'find-file)
(global-set-key "\C-l" 'goto-line)
(global-set-key "\C-f" 'isearch-forward-regexp)
(define-key isearch-mode-map (kbd "<return>") 'isearch-repeat-forward)
(define-key isearch-mode-map (kbd "<S-return>") 'isearch-repeat-backward)
(define-key vc-prefix-map "d" 'vc-root-diff)
(define-key vc-prefix-map "D" 'vc-dir)
(global-set-key "\C-r" 'replace-regexp)
(global-set-key "\C-a" 'mark-whole-buffer)
(global-unset-key "\C-y") ; default paste key

(global-set-key (kbd "<home>") 'beginning-of-line)
(global-set-key (kbd "<end>") 'end-of-line) 

;; key bindings
(when (eq system-type 'darwin) ;; mac specific settings
  (setq mac-option-modifier 'alt)
  (setq mac-command-modifier 'meta)
  (global-set-key [kp-delete] 'delete-char) ;; sets fn-delete to be right-delete
  )

;; ************************************************

;; Personal setup

(setq-default major-mode 'text-mode)
(auto-compression-mode 1)
(setq make-backup-files nil)
;(set-default 'truncate-lines t)
(add-hook 'find-file-hook 'flymake-find-file-hook)
(delete-selection-mode)

(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

; don't split window when opening an interactive SQL session
(add-to-list 'same-window-buffer-names "*SQL*")

; Disable menu bar except for GUI emacs
(if (not window-system)
    (add-hook 'term-setup-hook #'(lambda () (menu-bar-mode -1))))

(require 'tabbar)
(tabbar-mode)

(linum-mode)
(global-linum-mode 1)

;; ************************************************

;; Text

(add-hook 'text-mode-hook
          '(lambda ()
             (local-set-key "\C-c\C-s" 'ispell)
             (local-set-key "\C-c\C-w" 'count-words)))

;; ************************************************

;; Emacs LISP
(defun elint-this-file ()
  (interactive)
  (elint-file (buffer-file-name)))

(defun reload-home ()
  (interactive)
  (load-file "~/.emacs"))

(add-hook 'emacs-lisp-mode-hook
          '(lambda ()
             (local-set-key (kbd "C-c C-l") 'elint-this-file)
             (local-set-key (kbd "C-c C-r") 'reload-home)))

;; ************************************************

;; Markdown
(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

;; ************************************************

;; HTML
(add-hook 'html-mode-hook
          '(lambda ()
             (local-set-key "\C-c\C-w" 'browse-url-of-file)))

;; ************************************************

;; PHP
(require 'php-mode)

;; ************************************************

;; Ruby
(add-to-list 'auto-mode-alist '("\\.rdoc\\'" . ruby-mode))

;; ************************************************

;; Git
; Try git-el for now
(require 'git)
(require 'git-blame)

(add-to-list 'auto-mode-alist '(".gitconfig" . conf-unix-mode))

; Use C-s to finish commit message (VC)
(add-hook 'log-edit-mode-hook
          '(lambda ()
             (local-set-key "\C-s" 'log-edit-done)))

;; ************************************************

(x-focus-frame nil)

;; Local Variables:
;; mode: emacs-lisp
;; End:
